"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.insertScript = insertScript;
exports.removeScript = removeScript;
exports.debounce = debounce;
exports.isReactElement = isReactElement;
exports.shallowComparison = shallowComparison;

var _react = _interopRequireDefault(require("react"));

function insertScript(src, id, parent) {
  var script = window.document.createElement('script');
  script.async = true;
  script.src = src;
  script.id = id;
  parent.appendChild(script);
  return script;
}

function removeScript(id, parent) {
  var script = window.document.getElementById(id);

  if (script) {
    parent.removeChild(script);
  }
}

function debounce(func, wait, runOnFirstCall) {
  var timeout;
  return function () {
    var context = this;
    var args = arguments;

    var deferredExecution = function deferredExecution() {
      timeout = null;

      if (!runOnFirstCall) {
        func.apply(context, args);
      }
    };

    var callNow = runOnFirstCall && !timeout;
    window.clearTimeout(timeout);
    timeout = setTimeout(deferredExecution, wait);

    if (callNow) {
      func.apply(context, args);
    }
  };
}

function isReactElement(element) {
  if (_react.default.isValidElement(element)) {
    return true;
  } else if (Array.isArray(element)) {
    return element.some(function (value) {
      return _react.default.isValidElement(value);
    });
  }

  return false;
}

function shallowComparison(currentProps, nextProps) {
  // Perform a comparison of all props, excluding React Elements, to prevent unnecessary updates
  var propNames = new Set(Object.keys(currentProps), Object.keys(nextProps));

  for (var _iterator = propNames, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
    var _ref;

    if (_isArray) {
      if (_i >= _iterator.length) break;
      _ref = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) break;
      _ref = _i.value;
    }

    var name = _ref;
    if (currentProps[name] !== nextProps[name] && !isReactElement(currentProps[name])) return true;
  }

  return false;
}