{"componentChunkName":"component---src-templates-tags-jsx","path":"/tag/OUTPUT","result":{"data":{"site":{"siteMetadata":{"title":"Cho&"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"posts":[{"html":"<h2>Webpack의 정의</h2>\n<p>-웹어플리케이션을 위해 사용하는 모듈 번들러라는 도구.<br>\n웹팩은 모듈간의 의존관계를 해석한 후에 의존성 그래프를 만들어 모듈들을 해석하고 번들링을 하는 과정을 진행한다.\n이과정은 파일별로 쪼개진 모듈들의 내용을 번들 파일 내에 모두 담는 과정을 의미한다.</p>\n<h3>Entry란?</h3>\n<p>-모듈의 의존 관계를 이해하기 위한 시작점을 설정.</p>\n<h3>Output이란?</h3>\n<p>-Webpack이 생성하는 번들 파일에 대한 정보를 설정.</p>\n<h3>예제로 이해하기</h3>\n<p>모듈에 대한 내용을 진행 할 폴더에서 </p>\n<div class=\"gatsby-highlight\" data-language=\"shellscript\"><pre class=\"language-shellscript\"><code class=\"language-shellscript\">$ npm init -y</code></pre></div>\n<p>console에 json에 대한 내용이 출력되고 package.json 파일이 생성된다.<br>\n이 파일은 작업하는 프로젝트에 대한 정보를 나타내고 이 프로젝트가 사용하는 패키지들을 관리해주는 역활을 한다.<br>\n또 npm명령어를 통해 복잡한 스크립트를 쉽게 다룰 수 있게 도와 준다.  </p>\n<p>package.json파일을 살펴 보면 내가 만든 파일의 이름이 name이라는 프로퍼티에 기록된 것을 확인 할 수 있으며,<br>\n프로젝트의 버젼 설명등 다양한 프로젝트에 관한 정보들을 담고 있다.\nname의 기본값은 프로젝트 폴더의 이름으로 만들어진다. 그리고 외부 패키지를 사용하게 되면 이 파일안에 기록한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shellscript\"><pre class=\"language-shellscript\"><code class=\"language-shellscript\">$ npm install webpack webpack-cli --save-dev</code></pre></div>\n<p>(<code class=\"language-text\">webpack-cli</code> : 웹팩을 실행 할 수 있는 명령어들을 지원해주는 패키지를 의미한다.)</p>\n<p>설치가 끝나면 node-modules라는 폴더가 생기고,<br>\n이 안에 webpack과 webpack-cli 패키지 그리고 이 두패키지가 의존하고 있는 다른 패키지들이 모두 설치 되어 있다.  </p>\n<p>폴더 내부에 package.json파일 안에서 webpack과 webpack-cli이 설치된 것을 볼 수 있다.</p>\n<p>[mathUtil.js]</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">PI</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getCircleArea</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">r</span> <span class=\"token operator\">=></span> r <span class=\"token operator\">*</span> r <span class=\"token operator\">*</span> <span class=\"token constant\">PI</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> getSquareArea <span class=\"token operator\">=</span> d <span class=\"token operator\">=</span> d <span class=\"token operator\">*</span> d<span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">PI</span><span class=\"token punctuation\">,</span>\n    getCircleArea<span class=\"token punctuation\">,</span>\n    getSquareArea\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>[log.js]</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">logInput</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">input</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">입력받은 값 : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>input<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">logResult</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">figure<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>figure<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">의 넓이는 : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 입니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> logFigureError <span class=\"token operator\">=</span> <span class=\"token string\">\"지원되지 않는 도형입니다. '정사각형' 또는 '원'을 입력해주세요. \\n커맨드 라인을 종료합니다.\"</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    logInput<span class=\"token punctuation\">,</span>\n    logResult<span class=\"token punctuation\">,</span>\n    logFigureError\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>[index.js]</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> readline <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"readline\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> rl <span class=\"token operator\">=</span> readline<span class=\"token punctuation\">.</span><span class=\"token function\">createInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    input<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">,</span>\n    output<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span>stdout\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getCircleArea<span class=\"token punctuation\">,</span> getSquareArea <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./mathUtil'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> logFigureError<span class=\"token punctuation\">,</span> logInput<span class=\"token punctuation\">,</span> logResult <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./log'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrl<span class=\"token punctuation\">.</span><span class=\"token function\">question</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"넓이를 구하고자 하는 도형의 종류를 입력해주세요. ( 정사각형, 원) :\"</span><span class=\"token punctuation\">,</span> \n    <span class=\"token parameter\">figure</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">선택된 도형: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>figure<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>figure<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"정사각형\"</span><span class=\"token punctuation\">:</span>\n        rl<span class=\"token punctuation\">.</span><span class=\"token function\">question</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"변의 길이를 입력 해 주세요. :\"</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">input</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">logInput</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">logResult</span><span class=\"token punctuation\">(</span>figure<span class=\"token punctuation\">,</span> <span class=\"token function\">getSquareArea</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        rl<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">\"원\"</span><span class=\"token punctuation\">:</span>\n          rl<span class=\"token punctuation\">.</span><span class=\"token function\">question</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"반지름의 길이를 입력 해 주세요. :\"</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">input</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">logInput</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">logResult</span><span class=\"token punctuation\">(</span>figure<span class=\"token punctuation\">,</span> <span class=\"token function\">getCircleArea</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          rl<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>logFigureError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        rl<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>[index.js]파일과 [mathUtil.js],[log.js]파일은 서로 의존성이 있는 파일로<br>\n웹팩을 이용하 하나의 파일로 번들링 된다.</p>\n<p>이에 웹팩을 실행 하려면 이전 버젼의 웹팩에서는 설정해 주어야 했던 것들 을<br>\n웹팩 4버젼으로 업데이트 된 후에 Zero Configuration을 통하여 자동으로 설정을 잡아주게 되었다. </p>\n<p>대신 Zero Configuration을 사용하기 위해서는<br>\n엔트리의 경로를 src폴더 안에 index.js라는 파일 이름으로 준비해 주어야 동작을 하고,<br>\n또한 번들 파일의 위치도 dist라는 폴더 안으로 설정해주어야 하며 번들파일의 이름은 미리 main.js 로 정해져 있다.\n즉, entry와 output을 따로 설정 하지 않아도 자동으로 설정이 된다.</p>\n<p>이렇게 환경 설정을 해준 후</p>\n<div class=\"gatsby-highlight\" data-language=\"shellscript\"><pre class=\"language-shellscript\"><code class=\"language-shellscript\">$ npx webpack --target=node</code></pre></div>\n<p><code class=\"language-text\">--target=node</code> 는 readline이라는 node의 내장 모듈을 인식할 수 있게 target키를 통해 node환경을 설정해주는 명령어이다.</p>\n<h3>Webpack 직접 설정하기</h3>\n<p>[webpack.config.js]</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    entry<span class=\"token punctuation\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n    output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        path<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'bundle.js'</span> <span class=\"token comment\">// cli와 다르게 main.js가 아닌 bundle.js로 파일이 생성된다</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    target<span class=\"token punctuation\">:</span> <span class=\"token string\">'node'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br><br><br><br><br><br><br></p>\n<h6>*위의 내용은 [fastcampus]의 WEBPACK-백성훈 online 강의를 정리한 내용입니다.</h6>","id":"8511b7de-50e9-51e5-944d-49f2e028df8b","timeToRead":3,"frontmatter":{"date":"November 28, 2019","path":"/blog/structure-of-webpack-entry-output","tags":"WEBPACK, ENTRY, OUTPUT","title":"Webpack의 기본 구조 - entry, output"}}],"tag":"OUTPUT","pagesSum":1,"page":1}}}