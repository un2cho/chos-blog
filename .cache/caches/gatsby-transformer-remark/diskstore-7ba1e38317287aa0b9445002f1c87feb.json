{"expireTime":9007200829397300000,"key":"transformer-remark-markdown-html-ast-add7b9900b634f8f96cb11770afd6ac4-gatsby-remark-prismjsgatsby-remark-images-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Partially applied functions","position":{"start":{"line":2,"column":2,"offset":2},"end":{"line":2,"column":29,"offset":29}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":30,"offset":30}}},{"type":"text","value":", or ","position":{"start":{"line":2,"column":30,"offset":30},"end":{"line":2,"column":35,"offset":35}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"partials","position":{"start":{"line":2,"column":36,"offset":36},"end":{"line":2,"column":44,"offset":44}}}],"position":{"start":{"line":2,"column":35,"offset":35},"end":{"line":2,"column":45,"offset":45}}},{"type":"text","value":" for short, are functions with\npre-set arguments. The use of partials is very common in functional\nprogramming and has been implemented in several JavaScript libraries and more\nrecently in ECMAScript 5 through ","position":{"start":{"line":2,"column":45,"offset":45},"end":{"line":5,"column":34,"offset":255}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind","title":"Function.prototype.bind"},"children":[{"type":"raw","value":"<code class=\"language-text\">Function.prototype.bind</code>","position":{"start":{"line":5,"column":35,"offset":256},"end":{"line":5,"column":60,"offset":281}}}],"position":{"start":{"line":5,"column":34,"offset":255},"end":{"line":5,"column":67,"offset":288}}},{"type":"text","value":". Consider\nthe following examples:","position":{"start":{"line":5,"column":67,"offset":288},"end":{"line":6,"column":24,"offset":322}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":6,"column":24,"offset":322}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Adds two numbers</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Let's make some partials!</span>\n<span class=\"token comment\">// Underscore.js</span>\n<span class=\"token keyword\">var</span> addTwo <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">partial</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Dojo.js</span>\n<span class=\"token keyword\">var</span> addFour <span class=\"token operator\">=</span> lang<span class=\"token punctuation\">.</span><span class=\"token function\">partial</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// JavaScript 1.8.5</span>\n<span class=\"token keyword\">var</span> addSix <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Let's use our partials!</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">addTwo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Logs 3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">addFour</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Logs 7</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">addSix</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Logs 11</span></code></pre></div>","position":{"start":{"line":8,"column":1,"offset":324},"end":{"line":24,"column":4,"offset":710}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In each of the above examples the original function is not modified -- rather,\na new function is created which calls the original function by concatenating\nthe pre-defined arguments with the call-time arguments. JavaScript's\n","position":{"start":{"line":26,"column":1,"offset":712},"end":{"line":29,"column":1,"offset":937}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind","title":"Function.prototype.bind"},"children":[{"type":"raw","value":"<code class=\"language-text\">bind</code>","position":{"start":{"line":29,"column":2,"offset":938},"end":{"line":29,"column":8,"offset":944}}}],"position":{"start":{"line":29,"column":1,"offset":937},"end":{"line":29,"column":15,"offset":951}}},{"type":"text","value":" works a little differently from Underscore's\n","position":{"start":{"line":29,"column":15,"offset":951},"end":{"line":30,"column":1,"offset":997}}},{"type":"element","tagName":"a","properties":{"href":"http://underscorejs.org/#partial","title":"Underscore.js - Partial"},"children":[{"type":"raw","value":"<code class=\"language-text\">_.partial</code>","position":{"start":{"line":30,"column":2,"offset":998},"end":{"line":30,"column":13,"offset":1009}}}],"position":{"start":{"line":30,"column":1,"offset":997},"end":{"line":30,"column":24,"offset":1020}}},{"type":"text","value":" and Dojo's ","position":{"start":{"line":30,"column":24,"offset":1020},"end":{"line":30,"column":36,"offset":1032}}},{"type":"element","tagName":"a","properties":{"href":"http://dojotoolkit.org/reference-guide/1.9/dojo/_base/lang.html#partial","title":"Dojo lang.partial"},"children":[{"type":"raw","value":"<code class=\"language-text\">lang.partial</code>","position":{"start":{"line":30,"column":37,"offset":1033},"end":{"line":30,"column":51,"offset":1047}}}],"position":{"start":{"line":30,"column":36,"offset":1032},"end":{"line":30,"column":62,"offset":1058}}},{"type":"text","value":" in that its\nfirst argument becomes the value of ","position":{"start":{"line":30,"column":62,"offset":1058},"end":{"line":31,"column":37,"offset":1107}}},{"type":"raw","value":"<code class=\"language-text\">this</code>","position":{"start":{"line":31,"column":37,"offset":1107},"end":{"line":31,"column":43,"offset":1113}}},{"type":"text","value":" when the function is called. You\nwill need to use this if you are partially applying instance methods.\nUnderscore and Dojo provide similar functionality through ","position":{"start":{"line":31,"column":43,"offset":1113},"end":{"line":33,"column":59,"offset":1275}}},{"type":"element","tagName":"a","properties":{"href":"http://underscorejs.org/#bind","title":"Underscore.js - Bind"},"children":[{"type":"raw","value":"<code class=\"language-text\">_.bind</code>","position":{"start":{"line":33,"column":60,"offset":1276},"end":{"line":33,"column":68,"offset":1284}}}],"position":{"start":{"line":33,"column":59,"offset":1275},"end":{"line":33,"column":76,"offset":1292}}},{"type":"text","value":"\nand ","position":{"start":{"line":33,"column":76,"offset":1292},"end":{"line":34,"column":5,"offset":1297}}},{"type":"element","tagName":"a","properties":{"href":"http://dojotoolkit.org/reference-guide/1.9/dojo/_base/lang.html#hitch","title":"Dojo lang.hitch"},"children":[{"type":"raw","value":"<code class=\"language-text\">lang.hitch</code>","position":{"start":{"line":34,"column":6,"offset":1298},"end":{"line":34,"column":18,"offset":1310}}}],"position":{"start":{"line":34,"column":5,"offset":1297},"end":{"line":34,"column":26,"offset":1318}}},{"type":"text","value":" respectively. For the sake of simplicity, these\nfunctions will not be covered here.","position":{"start":{"line":34,"column":26,"offset":1318},"end":{"line":35,"column":36,"offset":1402}}}],"position":{"start":{"line":26,"column":1,"offset":712},"end":{"line":35,"column":36,"offset":1402}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"How about a more practical example? ","position":{"start":{"line":37,"column":1,"offset":1404},"end":{"line":37,"column":37,"offset":1440}}},{"type":"element","tagName":"a","properties":{"href":"http://nodejs.org/","title":"Node.js"},"children":[{"type":"text","value":"Node.js","position":{"start":{"line":37,"column":38,"offset":1441},"end":{"line":37,"column":45,"offset":1448}}}],"position":{"start":{"line":37,"column":37,"offset":1440},"end":{"line":37,"column":52,"offset":1455}}},{"type":"text","value":" follows a convention for\nall asynchronous callbacks -- they are expected to take an error argument\nfollowed by a result argument. ","position":{"start":{"line":37,"column":52,"offset":1455},"end":{"line":39,"column":32,"offset":1586}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/caolan/async","title":"Async.js"},"children":[{"type":"text","value":"Async.js","position":{"start":{"line":39,"column":33,"offset":1587},"end":{"line":39,"column":41,"offset":1595}}}],"position":{"start":{"line":39,"column":32,"offset":1586},"end":{"line":39,"column":49,"offset":1603}}},{"type":"text","value":", a library which provides\nfunctions for dealing with asynchronous control flow and collection\nmanipulation, builds upon this convention with functions like\n","position":{"start":{"line":39,"column":49,"offset":1603},"end":{"line":42,"column":1,"offset":1760}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/caolan/async#parallel","title":"Async.js - parallel"},"children":[{"type":"raw","value":"<code class=\"language-text\">parallel</code>","position":{"start":{"line":42,"column":2,"offset":1761},"end":{"line":42,"column":12,"offset":1771}}}],"position":{"start":{"line":42,"column":1,"offset":1760},"end":{"line":42,"column":23,"offset":1782}}},{"type":"text","value":" and ","position":{"start":{"line":42,"column":23,"offset":1782},"end":{"line":42,"column":28,"offset":1787}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/caolan/async#series","title":"Async.js - series"},"children":[{"type":"raw","value":"<code class=\"language-text\">series</code>","position":{"start":{"line":42,"column":29,"offset":1788},"end":{"line":42,"column":37,"offset":1796}}}],"position":{"start":{"line":42,"column":28,"offset":1787},"end":{"line":42,"column":46,"offset":1805}}},{"type":"text","value":" which take arrays of functions\nthat in turn take nothing but these conventional callbacks. Consider the\nfollowing examples:","position":{"start":{"line":42,"column":46,"offset":1805},"end":{"line":44,"column":20,"offset":1929}}}],"position":{"start":{"line":37,"column":1,"offset":1404},"end":{"line":44,"column":20,"offset":1929}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Without partials</span>\nasync<span class=\"token punctuation\">.</span><span class=\"token function\">parallel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token comment\">// `done` accepts err, result</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">done</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">done</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// err is the first thrown / passed error</span>\n  <span class=\"token comment\">// results is an array of results</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// With async's own partial implementation</span>\nasync<span class=\"token punctuation\">.</span><span class=\"token function\">parallel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token function\">async</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span>readFile<span class=\"token punctuation\">,</span> <span class=\"token string\">'foo.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">async</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span>readFile<span class=\"token punctuation\">,</span> <span class=\"token string\">'bar.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// same as before</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":46,"column":1,"offset":1931},"end":{"line":68,"column":4,"offset":2462}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Async provides its own partial implementation by the name of ","position":{"start":{"line":70,"column":1,"offset":2464},"end":{"line":70,"column":62,"offset":2525}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/caolan/async#apply","title":"Async.js - apply"},"children":[{"type":"raw","value":"<code class=\"language-text\">apply</code>","position":{"start":{"line":70,"column":63,"offset":2526},"end":{"line":70,"column":70,"offset":2533}}}],"position":{"start":{"line":70,"column":62,"offset":2525},"end":{"line":70,"column":78,"offset":2541}}},{"type":"text","value":"\nwhich is very similar to Underscore's implementation. By partially applying\n","position":{"start":{"line":70,"column":78,"offset":2541},"end":{"line":72,"column":1,"offset":2618}}},{"type":"raw","value":"<code class=\"language-text\">fs.readFile</code>","position":{"start":{"line":72,"column":1,"offset":2618},"end":{"line":72,"column":14,"offset":2631}}},{"type":"text","value":" we are able to shorten the function signature from ","position":{"start":{"line":72,"column":14,"offset":2631},"end":{"line":72,"column":66,"offset":2683}}},{"type":"raw","value":"<code class=\"language-text\">filename,\nencoding, callback</code>","position":{"start":{"line":72,"column":66,"offset":2683},"end":{"line":73,"column":20,"offset":2713}}},{"type":"text","value":" to just ","position":{"start":{"line":73,"column":20,"offset":2713},"end":{"line":73,"column":29,"offset":2722}}},{"type":"raw","value":"<code class=\"language-text\">callback</code>","position":{"start":{"line":73,"column":29,"offset":2722},"end":{"line":73,"column":39,"offset":2732}}},{"type":"text","value":" enabling us to make an array of\npartials rather than manually declaring functions as in the first example.","position":{"start":{"line":73,"column":39,"offset":2732},"end":{"line":74,"column":75,"offset":2839}}}],"position":{"start":{"line":70,"column":1,"offset":2464},"end":{"line":74,"column":75,"offset":2839}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a side note, you may have noticed that the last argument to\n","position":{"start":{"line":76,"column":1,"offset":2841},"end":{"line":77,"column":1,"offset":2904}}},{"type":"raw","value":"<code class=\"language-text\">Async.parallel</code>","position":{"start":{"line":77,"column":1,"offset":2904},"end":{"line":77,"column":17,"offset":2920}}},{"type":"text","value":" is a Node-style callback. If you felt so inclined, you could\npartially apply ","position":{"start":{"line":77,"column":17,"offset":2920},"end":{"line":78,"column":17,"offset":2998}}},{"type":"raw","value":"<code class=\"language-text\">Async.parallel</code>","position":{"start":{"line":78,"column":17,"offset":2998},"end":{"line":78,"column":33,"offset":3014}}},{"type":"text","value":" and ","position":{"start":{"line":78,"column":33,"offset":3014},"end":{"line":78,"column":38,"offset":3019}}},{"type":"raw","value":"<code class=\"language-text\">Async.series</code>","position":{"start":{"line":78,"column":38,"offset":3019},"end":{"line":78,"column":52,"offset":3033}}},{"type":"text","value":" and pass those partials to\nother calls to ","position":{"start":{"line":78,"column":52,"offset":3033},"end":{"line":79,"column":16,"offset":3076}}},{"type":"raw","value":"<code class=\"language-text\">Async.parallel</code>","position":{"start":{"line":79,"column":16,"offset":3076},"end":{"line":79,"column":32,"offset":3092}}},{"type":"text","value":" and ","position":{"start":{"line":79,"column":32,"offset":3092},"end":{"line":79,"column":37,"offset":3097}}},{"type":"raw","value":"<code class=\"language-text\">Async.series</code>","position":{"start":{"line":79,"column":37,"offset":3097},"end":{"line":79,"column":51,"offset":3111}}},{"type":"text","value":", as such:","position":{"start":{"line":79,"column":51,"offset":3111},"end":{"line":79,"column":61,"offset":3121}}}],"position":{"start":{"line":76,"column":1,"offset":2841},"end":{"line":79,"column":61,"offset":3121}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">async<span class=\"token punctuation\">.</span><span class=\"token function\">series</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token function\">async</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>async<span class=\"token punctuation\">.</span>parallel<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// First group of parallel tasks</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">async</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>async<span class=\"token punctuation\">.</span>parallel<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// Second group of parallel tasks</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// err is the same as always</span>\n  <span class=\"token comment\">// results is an array of arrays</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":81,"column":1,"offset":3123},"end":{"line":93,"column":4,"offset":3396}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This code will run a group of tasks in parallel and when they are all done run\na second group of tasks in parallel. The final ","position":{"start":{"line":95,"column":1,"offset":3398},"end":{"line":96,"column":48,"offset":3524}}},{"type":"raw","value":"<code class=\"language-text\">results</code>","position":{"start":{"line":96,"column":48,"offset":3524},"end":{"line":96,"column":57,"offset":3533}}},{"type":"text","value":" array will be an\narray of arrays where each internal array contains the results of each group\nof tasks. You can easily change up this example to run two groups of serial\ntasks in parallel by changing all calls to ","position":{"start":{"line":96,"column":57,"offset":3533},"end":{"line":99,"column":44,"offset":3747}}},{"type":"raw","value":"<code class=\"language-text\">series</code>","position":{"start":{"line":99,"column":44,"offset":3747},"end":{"line":99,"column":52,"offset":3755}}},{"type":"text","value":" with ","position":{"start":{"line":99,"column":52,"offset":3755},"end":{"line":99,"column":58,"offset":3761}}},{"type":"raw","value":"<code class=\"language-text\">parallel</code>","position":{"start":{"line":99,"column":58,"offset":3761},"end":{"line":99,"column":68,"offset":3771}}},{"type":"text","value":" and vice\nversa. This will work for most functions provided by Async.","position":{"start":{"line":99,"column":68,"offset":3771},"end":{"line":100,"column":60,"offset":3840}}}],"position":{"start":{"line":95,"column":1,"offset":3398},"end":{"line":100,"column":60,"offset":3840}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"On to a more practical example, can we read a bunch of files in parallel and\nonly have to write ","position":{"start":{"line":102,"column":1,"offset":3842},"end":{"line":103,"column":20,"offset":3938}}},{"type":"raw","value":"<code class=\"language-text\">async.apply</code>","position":{"start":{"line":103,"column":20,"offset":3938},"end":{"line":103,"column":33,"offset":3951}}},{"type":"text","value":" once? Of course! Enter\n","position":{"start":{"line":103,"column":33,"offset":3951},"end":{"line":104,"column":1,"offset":3975}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map","title":"Array.prototype.map"},"children":[{"type":"raw","value":"<code class=\"language-text\">Array.prototype.map</code>","position":{"start":{"line":104,"column":2,"offset":3976},"end":{"line":104,"column":23,"offset":3997}}}],"position":{"start":{"line":104,"column":1,"offset":3975},"end":{"line":104,"column":29,"offset":4003}}},{"type":"text","value":":","position":{"start":{"line":104,"column":29,"offset":4003},"end":{"line":104,"column":30,"offset":4004}}}],"position":{"start":{"line":102,"column":1,"offset":3842},"end":{"line":104,"column":30,"offset":4004}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">async<span class=\"token punctuation\">.</span><span class=\"token function\">parallel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'first.txt'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'second.txt'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'foo.txt'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'bar.txt'</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">async</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span>readFile<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Same as before.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":106,"column":1,"offset":4006},"end":{"line":117,"column":4,"offset":4216}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this example calling ","position":{"start":{"line":119,"column":1,"offset":4218},"end":{"line":119,"column":25,"offset":4242}}},{"type":"raw","value":"<code class=\"language-text\">map</code>","position":{"start":{"line":119,"column":25,"offset":4242},"end":{"line":119,"column":30,"offset":4247}}},{"type":"text","value":" on the array of file names returns an array of\npartially applied ","position":{"start":{"line":119,"column":30,"offset":4247},"end":{"line":120,"column":19,"offset":4313}}},{"type":"raw","value":"<code class=\"language-text\">fs.readfile</code>","position":{"start":{"line":120,"column":19,"offset":4313},"end":{"line":120,"column":32,"offset":4326}}},{"type":"text","value":" functions. Using this technique you can\ndynamically create a list of files and read them all into memory. Want to\nlimit the amount of files being read at once? That's what\n","position":{"start":{"line":120,"column":32,"offset":4326},"end":{"line":123,"column":1,"offset":4499}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/caolan/async#parallellimittasks-limit-callback","title":"Async.js - parallelLimit"},"children":[{"type":"raw","value":"<code class=\"language-text\">parallelLimit</code>","position":{"start":{"line":123,"column":2,"offset":4500},"end":{"line":123,"column":17,"offset":4515}}}],"position":{"start":{"line":123,"column":1,"offset":4499},"end":{"line":123,"column":33,"offset":4531}}},{"type":"text","value":" is for.","position":{"start":{"line":123,"column":33,"offset":4531},"end":{"line":123,"column":41,"offset":4539}}}],"position":{"start":{"line":119,"column":1,"offset":4218},"end":{"line":123,"column":41,"offset":4539}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Limitations","position":{"start":{"line":125,"column":4,"offset":4544},"end":{"line":125,"column":15,"offset":4555}}}],"position":{"start":{"line":125,"column":1,"offset":4541},"end":{"line":125,"column":15,"offset":4555}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So partials are pretty cool. But you have to be careful about how you use them\n(in JavaScript). In particular things can get tricky when you partially apply\nfunctions which take more arguments than you intend on passing. Consider the\nfollowing:","position":{"start":{"line":127,"column":1,"offset":4557},"end":{"line":130,"column":11,"offset":4801}}}],"position":{"start":{"line":127,"column":1,"offset":4557},"end":{"line":130,"column":11,"offset":4801}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// This function multiplies all of its arguments together</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">multiply</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span> cur</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> prev <span class=\"token operator\">*</span> cur<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// This function multiplies all of its arguments by each other and 2</span>\n<span class=\"token keyword\">var</span> mult2 <span class=\"token operator\">=</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// You might expect this to log [2, 4, 6, 8], but it actually logs [NaN, NaN, NaN, NaN]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>mult2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The solution is to explicity call mult2 with the arguments you want to pass</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">mult2</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":132,"column":1,"offset":4803},"end":{"line":150,"column":4,"offset":5395}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Really, it's not fair to call this a limitation of partials but JavaScript\nfunctions in general -- we would have gotten a similar result had we not made\na partial. In my experience this problem appears more often when I am using\npartials than when I'm not. What is happening here is that the function passed\nto ","position":{"start":{"line":152,"column":1,"offset":5397},"end":{"line":156,"column":4,"offset":5708}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map","title":"Array.prototype.map"},"children":[{"type":"raw","value":"<code class=\"language-text\">map</code>","position":{"start":{"line":156,"column":5,"offset":5709},"end":{"line":156,"column":10,"offset":5714}}}],"position":{"start":{"line":156,"column":4,"offset":5708},"end":{"line":156,"column":16,"offset":5720}}},{"type":"text","value":" takes three arguments: ","position":{"start":{"line":156,"column":16,"offset":5720},"end":{"line":156,"column":40,"offset":5744}}},{"type":"raw","value":"<code class=\"language-text\">value</code>","position":{"start":{"line":156,"column":40,"offset":5744},"end":{"line":156,"column":47,"offset":5751}}},{"type":"text","value":", ","position":{"start":{"line":156,"column":47,"offset":5751},"end":{"line":156,"column":49,"offset":5753}}},{"type":"raw","value":"<code class=\"language-text\">index</code>","position":{"start":{"line":156,"column":49,"offset":5753},"end":{"line":156,"column":56,"offset":5760}}},{"type":"text","value":", and ","position":{"start":{"line":156,"column":56,"offset":5760},"end":{"line":156,"column":62,"offset":5766}}},{"type":"raw","value":"<code class=\"language-text\">array</code>","position":{"start":{"line":156,"column":62,"offset":5766},"end":{"line":156,"column":69,"offset":5773}}},{"type":"text","value":". Our\nintention is to map each ","position":{"start":{"line":156,"column":69,"offset":5773},"end":{"line":157,"column":26,"offset":5804}}},{"type":"raw","value":"<code class=\"language-text\">value</code>","position":{"start":{"line":157,"column":26,"offset":5804},"end":{"line":157,"column":33,"offset":5811}}},{"type":"text","value":" to ","position":{"start":{"line":157,"column":33,"offset":5811},"end":{"line":157,"column":37,"offset":5815}}},{"type":"raw","value":"<code class=\"language-text\">2 * value</code>","position":{"start":{"line":157,"column":37,"offset":5815},"end":{"line":157,"column":48,"offset":5826}}},{"type":"text","value":" but instead we end up with\n","position":{"start":{"line":157,"column":48,"offset":5826},"end":{"line":158,"column":1,"offset":5854}}},{"type":"raw","value":"<code class=\"language-text\">2 * value * index * array</code>","position":{"start":{"line":158,"column":1,"offset":5854},"end":{"line":158,"column":28,"offset":5881}}},{"type":"text","value":". The solution is to explicitly pass the arguments\nyou want into the partial.","position":{"start":{"line":158,"column":28,"offset":5881},"end":{"line":159,"column":27,"offset":5958}}}],"position":{"start":{"line":152,"column":1,"offset":5397},"end":{"line":159,"column":27,"offset":5958}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Another point to note is that partials usually have a ","position":{"start":{"line":161,"column":1,"offset":5960},"end":{"line":161,"column":55,"offset":6014}}},{"type":"raw","value":"<code class=\"language-text\">length</code>","position":{"start":{"line":161,"column":55,"offset":6014},"end":{"line":161,"column":63,"offset":6022}}},{"type":"text","value":" of ","position":{"start":{"line":161,"column":63,"offset":6022},"end":{"line":161,"column":67,"offset":6026}}},{"type":"raw","value":"<code class=\"language-text\">0</code>","position":{"start":{"line":161,"column":67,"offset":6026},"end":{"line":161,"column":70,"offset":6029}}},{"type":"text","value":". This\nmeans that they are declared without an arguments list. They still take\narguments but anything that checks for a partial's ","position":{"start":{"line":161,"column":70,"offset":6029},"end":{"line":163,"column":52,"offset":6159}}},{"type":"raw","value":"<code class=\"language-text\">length</code>","position":{"start":{"line":163,"column":52,"offset":6159},"end":{"line":163,"column":60,"offset":6167}}},{"type":"text","value":" property will more\nthan likely malfunction. For example, asynchronous tests in Mocha:","position":{"start":{"line":163,"column":60,"offset":6167},"end":{"line":164,"column":67,"offset":6253}}}],"position":{"start":{"line":161,"column":1,"offset":5960},"end":{"line":164,"column":67,"offset":6253}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Some sort of function is declared somewhere as such:</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">asyncFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// do something and call callback per node convention;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// It may be tempting to test it in Mocha as such since the async callback</span>\n<span class=\"token comment\">// will fail the test if an error is passed:</span>\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should do something without error'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">asyncFunc</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foobarbaz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// DON'T DO THIS!</span>\n\n<span class=\"token comment\">// However, since the partial doesn't have a `length` property the test will</span>\n<span class=\"token comment\">// complete immediately and the callback will be undefined. The solution is to</span>\n<span class=\"token comment\">// explicity declare async test functions:</span>\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should do something without error'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">done</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">asyncFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foobarbaz'</span><span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":166,"column":1,"offset":6255},"end":{"line":182,"column":4,"offset":6933}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To learn more about testing with Mocha check out ","position":{"start":{"line":184,"column":1,"offset":6935},"end":{"line":184,"column":50,"offset":6984}}},{"type":"element","tagName":"a","properties":{"href":"/blog/testing-in-browsers-and-node/","title":"Testing in Browsers and Node with Mocha, Chai, Sinon, and Testem"},"children":[{"type":"text","value":"my article on the\nsubject","position":{"start":{"line":184,"column":51,"offset":6985},"end":{"line":185,"column":8,"offset":7010}}}],"position":{"start":{"line":184,"column":50,"offset":6984},"end":{"line":185,"column":15,"offset":7017}}},{"type":"text","value":" and the ","position":{"start":{"line":185,"column":15,"offset":7017},"end":{"line":185,"column":24,"offset":7026}}},{"type":"element","tagName":"a","properties":{"href":"http://visionmedia.github.io/mocha/","title":"Mocha"},"children":[{"type":"text","value":"official Mocha documentation","position":{"start":{"line":185,"column":25,"offset":7027},"end":{"line":185,"column":53,"offset":7055}}}],"position":{"start":{"line":185,"column":24,"offset":7026},"end":{"line":185,"column":61,"offset":7063}}},{"type":"text","value":".","position":{"start":{"line":185,"column":61,"offset":7063},"end":{"line":185,"column":62,"offset":7064}}}],"position":{"start":{"line":184,"column":1,"offset":6935},"end":{"line":185,"column":62,"offset":7064}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Kinda Partial-Like Things","position":{"start":{"line":187,"column":4,"offset":7069},"end":{"line":187,"column":29,"offset":7094}}}],"position":{"start":{"line":187,"column":1,"offset":7066},"end":{"line":187,"column":29,"offset":7094}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Throughout JavaScript and JavaScript libraries you will find various functions\nwhich take a function as an argument as well as a parameter list to pass to\nthe function. They aren't returning a partial for you to use, but they are an\nopportunity for you to avoid the creation of a partial if you don't have to\nmake one. Take for example ","position":{"start":{"line":189,"column":1,"offset":7096},"end":{"line":193,"column":28,"offset":7432}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/API/Window.setTimeout","title":"MDN - setTimeout"},"children":[{"type":"raw","value":"<code class=\"language-text\">setTimeout</code>","position":{"start":{"line":193,"column":29,"offset":7433},"end":{"line":193,"column":41,"offset":7445}}}],"position":{"start":{"line":193,"column":28,"offset":7432},"end":{"line":193,"column":54,"offset":7458}}},{"type":"text","value":" and\n","position":{"start":{"line":193,"column":54,"offset":7458},"end":{"line":194,"column":1,"offset":7463}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/API/Window.setInterval","title":"MDN - setInterval"},"children":[{"type":"raw","value":"<code class=\"language-text\">setInterval</code>","position":{"start":{"line":194,"column":2,"offset":7464},"end":{"line":194,"column":15,"offset":7477}}}],"position":{"start":{"line":194,"column":1,"offset":7463},"end":{"line":194,"column":29,"offset":7491}}},{"type":"text","value":":","position":{"start":{"line":194,"column":29,"offset":7491},"end":{"line":194,"column":30,"offset":7492}}}],"position":{"start":{"line":189,"column":1,"offset":7096},"end":{"line":194,"column":30,"offset":7492}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Consider the following:</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">,</span> baz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// You may think to compress it with a partial as such:</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token function\">doSomething</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> foo<span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">,</span> baz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// But this isn't really necessary. The following does the same thing:</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>doSomething<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> foo<span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">,</span> baz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// It also works with setInterval:</span>\n<span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>doSomething<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> foo<span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">,</span> baz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":196,"column":1,"offset":7494},"end":{"line":210,"column":4,"offset":7910}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In compliant JavaScript environments, the extra arguments passed to\n","position":{"start":{"line":212,"column":1,"offset":7912},"end":{"line":213,"column":1,"offset":7980}}},{"type":"raw","value":"<code class=\"language-text\">setTimeout</code>","position":{"start":{"line":213,"column":1,"offset":7980},"end":{"line":213,"column":13,"offset":7992}}},{"type":"text","value":" and ","position":{"start":{"line":213,"column":13,"offset":7992},"end":{"line":213,"column":18,"offset":7997}}},{"type":"raw","value":"<code class=\"language-text\">setInterval</code>","position":{"start":{"line":213,"column":18,"offset":7997},"end":{"line":213,"column":31,"offset":8010}}},{"type":"text","value":" are passed to the function when it is called.\nBe careful as you can't specify a context this way -- you will have to rely on\n","position":{"start":{"line":213,"column":31,"offset":8010},"end":{"line":215,"column":1,"offset":8136}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind","title":"Function.prototype.bind"},"children":[{"type":"raw","value":"<code class=\"language-text\">Function.prototype.bind</code>","position":{"start":{"line":215,"column":2,"offset":8137},"end":{"line":215,"column":27,"offset":8162}}}],"position":{"start":{"line":215,"column":1,"offset":8136},"end":{"line":215,"column":34,"offset":8169}}},{"type":"text","value":", ","position":{"start":{"line":215,"column":34,"offset":8169},"end":{"line":215,"column":36,"offset":8171}}},{"type":"element","tagName":"a","properties":{"href":"http://underscorejs.org/#bind","title":"Underscore.js - Bind"},"children":[{"type":"raw","value":"<code class=\"language-text\">_.bind</code>","position":{"start":{"line":215,"column":37,"offset":8172},"end":{"line":215,"column":45,"offset":8180}}}],"position":{"start":{"line":215,"column":36,"offset":8171},"end":{"line":215,"column":53,"offset":8188}}},{"type":"text","value":", and\n","position":{"start":{"line":215,"column":53,"offset":8188},"end":{"line":216,"column":1,"offset":8194}}},{"type":"element","tagName":"a","properties":{"href":"http://dojotoolkit.org/reference-guide/1.9/dojo/_base/lang.html#hitch","title":"Dojo lang.hitch"},"children":[{"type":"raw","value":"<code class=\"language-text\">lang.hitch</code>","position":{"start":{"line":216,"column":2,"offset":8195},"end":{"line":216,"column":14,"offset":8207}}}],"position":{"start":{"line":216,"column":1,"offset":8194},"end":{"line":216,"column":22,"offset":8215}}},{"type":"text","value":" for that.","position":{"start":{"line":216,"column":22,"offset":8215},"end":{"line":216,"column":32,"offset":8225}}}],"position":{"start":{"line":212,"column":1,"offset":7912},"end":{"line":216,"column":32,"offset":8225}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":218,"column":4,"offset":8230},"end":{"line":218,"column":14,"offset":8240}}}],"position":{"start":{"line":218,"column":1,"offset":8227},"end":{"line":218,"column":14,"offset":8240}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Using partials to adapt existing functions to match a given convention is a\nvery powerful technique. ","position":{"start":{"line":220,"column":1,"offset":8242},"end":{"line":221,"column":26,"offset":8343}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/caolan/async","title":"Async.js"},"children":[{"type":"text","value":"Async","position":{"start":{"line":221,"column":27,"offset":8344},"end":{"line":221,"column":32,"offset":8349}}}],"position":{"start":{"line":221,"column":26,"offset":8343},"end":{"line":221,"column":40,"offset":8357}}},{"type":"text","value":" provides more functions which when\ncombined with ","position":{"start":{"line":221,"column":40,"offset":8357},"end":{"line":222,"column":15,"offset":8407}}},{"type":"element","tagName":"a","properties":{"href":"http://nodejs.org/","title":"Node.js"},"children":[{"type":"text","value":"Node","position":{"start":{"line":222,"column":16,"offset":8408},"end":{"line":222,"column":20,"offset":8412}}}],"position":{"start":{"line":222,"column":15,"offset":8407},"end":{"line":222,"column":27,"offset":8419}}},{"type":"text","value":" conventions and partials can lead to very concise,\nreadable, and maintainable code. That being said, you will still have to be\ncareful in situations where arguments don't match up properly or where you\nneed to specify a special context for the partially applied function.","position":{"start":{"line":222,"column":27,"offset":8419},"end":{"line":225,"column":70,"offset":8691}}}],"position":{"start":{"line":220,"column":1,"offset":8242},"end":{"line":225,"column":70,"offset":8691}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":243,"column":1,"offset":10052}}}}