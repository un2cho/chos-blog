{"expireTime":9007200829397300000,"key":"transformer-remark-markdown-html-ast-de76b27e096da18d244af3c1c41af453-gatsby-remark-prismjsgatsby-remark-images-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":4,"offset":4}}},{"type":"element","tagName":"a","properties":{"href":"/blog/testing-in-browsers-and-node/","title":"Testing in Browsers and Node with Mocha, Chai, Sinon, and Testem"},"children":[{"type":"text","value":"my previous post on testing","position":{"start":{"line":2,"column":5,"offset":5},"end":{"line":2,"column":32,"offset":32}}}],"position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":39,"offset":39}}},{"type":"text","value":" I covered the basics of testing with\n","position":{"start":{"line":2,"column":39,"offset":39},"end":{"line":3,"column":1,"offset":77}}},{"type":"element","tagName":"a","properties":{"href":"http://visionmedia.github.io/mocha/","title":"Mocha"},"children":[{"type":"text","value":"Mocha","position":{"start":{"line":3,"column":2,"offset":78},"end":{"line":3,"column":7,"offset":83}}}],"position":{"start":{"line":3,"column":1,"offset":77},"end":{"line":3,"column":15,"offset":91}}},{"type":"text","value":", ","position":{"start":{"line":3,"column":15,"offset":91},"end":{"line":3,"column":17,"offset":93}}},{"type":"element","tagName":"a","properties":{"href":"http://chaijs.com/","title":"Chai"},"children":[{"type":"text","value":"Chai","position":{"start":{"line":3,"column":18,"offset":94},"end":{"line":3,"column":22,"offset":98}}}],"position":{"start":{"line":3,"column":17,"offset":93},"end":{"line":3,"column":29,"offset":105}}},{"type":"text","value":", and ","position":{"start":{"line":3,"column":29,"offset":105},"end":{"line":3,"column":35,"offset":111}}},{"type":"element","tagName":"a","properties":{"href":"http://sinonjs.org/","title":"Sinon.JS"},"children":[{"type":"text","value":"Sinon","position":{"start":{"line":3,"column":36,"offset":112},"end":{"line":3,"column":41,"offset":117}}}],"position":{"start":{"line":3,"column":35,"offset":111},"end":{"line":3,"column":49,"offset":125}}},{"type":"text","value":" -- including asynchronous\ntesting and stubbing methods with asynchronous callbacks (such as methods\nwhich make a server request). That's all well and good, but sometimes it's\nmore convenient or natural to synchronously manipulate the JavaScript timer or\ncreate fake servers to instantly and synchronously respond to requests.\n","position":{"start":{"line":3,"column":49,"offset":125},"end":{"line":8,"column":1,"offset":452}}},{"type":"element","tagName":"a","properties":{"href":"http://sinonjs.org/","title":"Sinon.JS"},"children":[{"type":"text","value":"Sinon","position":{"start":{"line":8,"column":2,"offset":453},"end":{"line":8,"column":7,"offset":458}}}],"position":{"start":{"line":8,"column":1,"offset":452},"end":{"line":8,"column":15,"offset":466}}},{"type":"text","value":" provides the facilities to work such magic -- read on to learn\nmore.","position":{"start":{"line":8,"column":15,"offset":466},"end":{"line":9,"column":6,"offset":535}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":9,"column":6,"offset":535}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Fake Timers","position":{"start":{"line":11,"column":4,"offset":540},"end":{"line":11,"column":15,"offset":551}}}],"position":{"start":{"line":11,"column":1,"offset":537},"end":{"line":11,"column":15,"offset":551}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you are testing code which uses ","position":{"start":{"line":13,"column":1,"offset":553},"end":{"line":13,"column":36,"offset":588}}},{"type":"raw","value":"<code class=\"language-text\">setTimeout</code>","position":{"start":{"line":13,"column":36,"offset":588},"end":{"line":13,"column":48,"offset":600}}},{"type":"text","value":" or ","position":{"start":{"line":13,"column":48,"offset":600},"end":{"line":13,"column":52,"offset":604}}},{"type":"raw","value":"<code class=\"language-text\">setInterval</code>","position":{"start":{"line":13,"column":52,"offset":604},"end":{"line":13,"column":65,"offset":617}}},{"type":"text","value":" it can be\ntricky to get the asynchronous test right and if your timeouts are of any\nsubstantial length your tests can take longer than ideal to complete. Sinon\nlets us replace the global ","position":{"start":{"line":13,"column":65,"offset":617},"end":{"line":16,"column":28,"offset":805}}},{"type":"raw","value":"<code class=\"language-text\">setTimeout</code>","position":{"start":{"line":16,"column":28,"offset":805},"end":{"line":16,"column":40,"offset":817}}},{"type":"text","value":" and ","position":{"start":{"line":16,"column":40,"offset":817},"end":{"line":16,"column":45,"offset":822}}},{"type":"raw","value":"<code class=\"language-text\">setInterval</code>","position":{"start":{"line":16,"column":45,"offset":822},"end":{"line":16,"column":58,"offset":835}}},{"type":"text","value":" functions with fake\nversions that we can control. Observe:","position":{"start":{"line":16,"column":58,"offset":835},"end":{"line":17,"column":39,"offset":894}}}],"position":{"start":{"line":13,"column":1,"offset":553},"end":{"line":17,"column":39,"offset":894}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fake timers'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Overwrite the global timer functions (setTimeout, setInterval) with Sinon fakes</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clock <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">useFakeTimers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Restore the global timer functions to their native implementations</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clock<span class=\"token punctuation\">.</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should synchronously advance the JavaScript clock'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Create a spy to record all calls</span>\n    <span class=\"token keyword\">var</span> spy <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">spy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Call the spy in 1000ms</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Tick the clock forward 999ms</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clock<span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token number\">999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// The spy should not have been called yet</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span>called<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Tick the clock forward 1ms</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clock<span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Now the spy should have been called</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span>called<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should also work with setInterval'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Faking the JavaScript clock also works with setInterval:</span>\n    <span class=\"token keyword\">var</span> spy <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">spy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clock<span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span>calledTwice<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clock<span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span>calledThrice<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":19,"column":1,"offset":896},"end":{"line":56,"column":4,"offset":2021}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When we call ","position":{"start":{"line":58,"column":1,"offset":2023},"end":{"line":58,"column":14,"offset":2036}}},{"type":"raw","value":"<code class=\"language-text\">sinon.useFakeTimers()</code>","position":{"start":{"line":58,"column":14,"offset":2036},"end":{"line":58,"column":37,"offset":2059}}},{"type":"text","value":" Sinon replaces the global ","position":{"start":{"line":58,"column":37,"offset":2059},"end":{"line":58,"column":64,"offset":2086}}},{"type":"raw","value":"<code class=\"language-text\">setTimeout</code>","position":{"start":{"line":58,"column":64,"offset":2086},"end":{"line":58,"column":76,"offset":2098}}},{"type":"text","value":"\nand ","position":{"start":{"line":58,"column":76,"offset":2098},"end":{"line":59,"column":5,"offset":2103}}},{"type":"raw","value":"<code class=\"language-text\">setInterval</code>","position":{"start":{"line":59,"column":5,"offset":2103},"end":{"line":59,"column":18,"offset":2116}}},{"type":"text","value":" functions and returns a clock object we can control. By\ncalling ","position":{"start":{"line":59,"column":18,"offset":2116},"end":{"line":60,"column":9,"offset":2181}}},{"type":"raw","value":"<code class=\"language-text\">clock.tick(n)</code>","position":{"start":{"line":60,"column":9,"offset":2181},"end":{"line":60,"column":24,"offset":2196}}},{"type":"text","value":" we are able to advance the clock by ","position":{"start":{"line":60,"column":24,"offset":2196},"end":{"line":60,"column":61,"offset":2233}}},{"type":"raw","value":"<code class=\"language-text\">n</code>","position":{"start":{"line":60,"column":61,"offset":2233},"end":{"line":60,"column":64,"offset":2236}}},{"type":"text","value":" milliseconds.\nWhen the milliseconds we have ticked forward are greater than or equal to the\ndelay parameter given to a timeout or interval the respective callbacks are\ncalled synchronously. In our case the callback is a Sinon spy which we are\nable to examine for call details when we need to make assertions.","position":{"start":{"line":60,"column":64,"offset":2236},"end":{"line":64,"column":66,"offset":2545}}}],"position":{"start":{"line":58,"column":1,"offset":2023},"end":{"line":64,"column":66,"offset":2545}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Ensuring Spy Call Order","position":{"start":{"line":66,"column":4,"offset":2550},"end":{"line":66,"column":27,"offset":2573}}}],"position":{"start":{"line":66,"column":1,"offset":2547},"end":{"line":66,"column":27,"offset":2573}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Spies are capable of determining the order they were called relative to each\nother. We can demonstrate this by testing that a number of timeouts were\ntriggered in the proper order:","position":{"start":{"line":68,"column":1,"offset":2575},"end":{"line":70,"column":31,"offset":2755}}}],"position":{"start":{"line":68,"column":1,"offset":2575},"end":{"line":70,"column":31,"offset":2755}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should be able to verify call order'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Create some spies</span>\n  <span class=\"token keyword\">var</span> spy1 <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">spy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> spy2 <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">spy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Set some timeouts</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>spy1<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>spy2<span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Advance the clock</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clock<span class=\"token punctuation\">.</span><span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Expectations</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spy1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span>called<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spy2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span>called<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spy1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">calledBefore</span><span class=\"token punctuation\">(</span>spy2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":72,"column":1,"offset":2757},"end":{"line":86,"column":4,"offset":3132}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I am using ","position":{"start":{"line":88,"column":1,"offset":3134},"end":{"line":88,"column":12,"offset":3145}}},{"type":"raw","value":"<code class=\"language-text\">sinon-chai</code>","position":{"start":{"line":88,"column":12,"offset":3145},"end":{"line":88,"column":24,"offset":3157}}},{"type":"text","value":" but you can also verify call order using\n","position":{"start":{"line":88,"column":24,"offset":3157},"end":{"line":89,"column":1,"offset":3199}}},{"type":"raw","value":"<code class=\"language-text\">spy.calledBefore(otherSpy)</code>","position":{"start":{"line":89,"column":1,"offset":3199},"end":{"line":89,"column":29,"offset":3227}}},{"type":"text","value":" and ","position":{"start":{"line":89,"column":29,"offset":3227},"end":{"line":89,"column":34,"offset":3232}}},{"type":"raw","value":"<code class=\"language-text\">spy.calledAfter(otherSpy)</code>","position":{"start":{"line":89,"column":34,"offset":3232},"end":{"line":89,"column":61,"offset":3259}}},{"type":"text","value":".","position":{"start":{"line":89,"column":61,"offset":3259},"end":{"line":89,"column":62,"offset":3260}}}],"position":{"start":{"line":88,"column":1,"offset":3134},"end":{"line":89,"column":62,"offset":3260}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Fake Requests","position":{"start":{"line":91,"column":4,"offset":3265},"end":{"line":91,"column":17,"offset":3278}}}],"position":{"start":{"line":91,"column":1,"offset":3262},"end":{"line":91,"column":17,"offset":3278}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"On to faking ","position":{"start":{"line":93,"column":1,"offset":3280},"end":{"line":93,"column":14,"offset":3293}}},{"type":"raw","value":"<code class=\"language-text\">XMLHttpRequest</code>","position":{"start":{"line":93,"column":14,"offset":3293},"end":{"line":93,"column":30,"offset":3309}}},{"type":"text","value":"! Sinon allows us to override the global\n","position":{"start":{"line":93,"column":30,"offset":3309},"end":{"line":94,"column":1,"offset":3350}}},{"type":"raw","value":"<code class=\"language-text\">XMLHttpRequest</code>","position":{"start":{"line":94,"column":1,"offset":3350},"end":{"line":94,"column":17,"offset":3366}}},{"type":"text","value":" object and synchronously control its behavior. Consider the\nfollowing:","position":{"start":{"line":94,"column":17,"offset":3366},"end":{"line":95,"column":11,"offset":3437}}}],"position":{"start":{"line":93,"column":1,"offset":3280},"end":{"line":95,"column":11,"offset":3437}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fake requests'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Overwrite the global XMLHttpRequest with Sinon fakes</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>xhr <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">useFakeXMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Create an array to store requests</span>\n    <span class=\"token keyword\">var</span> requests <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>requests <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Keep references to created requests</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onCreate</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">xhr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      requests<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Restore the global timer functions to their native implementations</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should fake XMLHttpRequests'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Create a spy</span>\n    <span class=\"token keyword\">var</span> spy <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">spy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Request using jQuery</span>\n    $<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/foo/bar/baz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Verify that the request is tracked -- not really necessary, just a demonstration</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>requests<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>have<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Respond to the request</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>requests<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">respond</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'FooBarBaz!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// The spy was called synchrnously, verify its call details.</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">calledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FooBarBaz!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":97,"column":1,"offset":3439},"end":{"line":128,"column":4,"offset":4485}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before each test we set up the fake ","position":{"start":{"line":130,"column":1,"offset":4487},"end":{"line":130,"column":37,"offset":4523}}},{"type":"raw","value":"<code class=\"language-text\">XMLHttpRequest</code>","position":{"start":{"line":130,"column":37,"offset":4523},"end":{"line":130,"column":53,"offset":4539}}},{"type":"text","value":" and override ","position":{"start":{"line":130,"column":53,"offset":4539},"end":{"line":130,"column":67,"offset":4553}}},{"type":"raw","value":"<code class=\"language-text\">onCreate</code>","position":{"start":{"line":130,"column":67,"offset":4553},"end":{"line":130,"column":77,"offset":4563}}},{"type":"text","value":"\nso that we may track all requests we make using it. After each test we restore\nthe native ","position":{"start":{"line":130,"column":77,"offset":4563},"end":{"line":132,"column":12,"offset":4654}}},{"type":"raw","value":"<code class=\"language-text\">XMLHttpRequest</code>","position":{"start":{"line":132,"column":12,"offset":4654},"end":{"line":132,"column":28,"offset":4670}}},{"type":"text","value":" object. In the actual test we make a request with\njQuery, make sure the proper number of requests were sent, and then respond to\nthe request with headers and data which causes jQuery to synchronously call a\nspy we set up.","position":{"start":{"line":132,"column":28,"offset":4670},"end":{"line":135,"column":15,"offset":4892}}}],"position":{"start":{"line":130,"column":1,"offset":4487},"end":{"line":135,"column":15,"offset":4892}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Cool stuff, but shouldn't there be an easier way to accomplish all of this\nwithout having to keep track of requests? Read on to learn about fake servers\nin Sinon.","position":{"start":{"line":137,"column":1,"offset":4894},"end":{"line":139,"column":10,"offset":5056}}}],"position":{"start":{"line":137,"column":1,"offset":4894},"end":{"line":139,"column":10,"offset":5056}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Fake Servers","position":{"start":{"line":141,"column":4,"offset":5061},"end":{"line":141,"column":16,"offset":5073}}}],"position":{"start":{"line":141,"column":1,"offset":5058},"end":{"line":141,"column":16,"offset":5073}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Fake servers in Sinon are an extension of fake requests which keep track of\nrequests for us so we don't have to! Fake servers work very similarly to fake\nrequests, as such:","position":{"start":{"line":143,"column":1,"offset":5075},"end":{"line":145,"column":19,"offset":5247}}}],"position":{"start":{"line":143,"column":1,"offset":5075},"end":{"line":145,"column":19,"offset":5247}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fake servers'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Set up a fake server (calls `sinon.useFakeXMLHttpRequest()`)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span>fakeServer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Create a spy to record server responses.</span>\n    <span class=\"token keyword\">var</span> spy <span class=\"token operator\">=</span> sinon<span class=\"token punctuation\">.</span><span class=\"token function\">spy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Request with jQuery</span>\n    $<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/foo/bar/baz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">always</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// MAKE SURE YOU CALL `server.respond()`!</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">respond</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Make assertions, onces again, everything is synchronous.</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span>calledOnce<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>spy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">calledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FooBarBaz!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Restore native functionality.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should fake server responses (basic response)'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FooBarBaz!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should fake server responses (url, response)'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/foo/bar/baz'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'FooBarBaz!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should fake server responses (url regex, response)'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\/foo\\/bar\\/baz$/</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'FooBarBaz!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should fake server responses (method, url, response)'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/foo/bar/baz'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'FooBarBaz!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should fake server responses (method, url regex, response)'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token regex\">/\\/foo\\/bar\\/baz$/</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'FooBarBaz!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should fake server responses (method, url, [code, headers, response])'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/foo/bar/baz'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'FooBarBaz!'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should fake server responses (method, url regex, [code, headers, response])'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token regex\">/\\/foo\\/bar\\/baz$/</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'FooBarBaz!'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":147,"column":1,"offset":5249},"end":{"line":196,"column":4,"offset":7022}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here we have seven tests which all have the same assertions. For that reason,\nI put the assertions in the ","position":{"start":{"line":198,"column":1,"offset":7024},"end":{"line":199,"column":29,"offset":7130}}},{"type":"raw","value":"<code class=\"language-text\">afterEach</code>","position":{"start":{"line":199,"column":29,"offset":7130},"end":{"line":199,"column":40,"offset":7141}}},{"type":"text","value":" hook. The basic flow of using fake\nservers is as such:","position":{"start":{"line":199,"column":40,"offset":7141},"end":{"line":200,"column":20,"offset":7196}}}],"position":{"start":{"line":198,"column":1,"offset":7024},"end":{"line":200,"column":20,"offset":7196}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Before Each:","position":{"start":{"line":202,"column":5,"offset":7202},"end":{"line":202,"column":17,"offset":7214}}}],"position":{"start":{"line":202,"column":3,"offset":7200},"end":{"line":202,"column":19,"offset":7216}}},{"type":"text","value":" Create a fake server, overriding native functionality.","position":{"start":{"line":202,"column":19,"offset":7216},"end":{"line":202,"column":74,"offset":7271}}}],"position":{"start":{"line":202,"column":1,"offset":7198},"end":{"line":202,"column":74,"offset":7271}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Test:","position":{"start":{"line":203,"column":5,"offset":7276},"end":{"line":203,"column":10,"offset":7281}}}],"position":{"start":{"line":203,"column":3,"offset":7274},"end":{"line":203,"column":12,"offset":7283}}},{"type":"text","value":" Tell the fake server how to respond to requests with\n","position":{"start":{"line":203,"column":12,"offset":7283},"end":{"line":204,"column":3,"offset":7339}}},{"type":"raw","value":"<code class=\"language-text\">server.respondWith(...)</code>","position":{"start":{"line":204,"column":3,"offset":7339},"end":{"line":204,"column":28,"offset":7364}}},{"type":"text","value":".","position":{"start":{"line":204,"column":28,"offset":7364},"end":{"line":204,"column":29,"offset":7365}}}],"position":{"start":{"line":203,"column":1,"offset":7272},"end":{"line":204,"column":29,"offset":7365}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Test:","position":{"start":{"line":205,"column":5,"offset":7370},"end":{"line":205,"column":10,"offset":7375}}}],"position":{"start":{"line":205,"column":3,"offset":7368},"end":{"line":205,"column":12,"offset":7377}}},{"type":"text","value":" Make requests using your favorite method.","position":{"start":{"line":205,"column":12,"offset":7377},"end":{"line":205,"column":54,"offset":7419}}}],"position":{"start":{"line":205,"column":1,"offset":7366},"end":{"line":205,"column":54,"offset":7419}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Test:","position":{"start":{"line":206,"column":5,"offset":7424},"end":{"line":206,"column":10,"offset":7429}}}],"position":{"start":{"line":206,"column":3,"offset":7422},"end":{"line":206,"column":12,"offset":7431}}},{"type":"text","value":" Tell the fake server to synchronously respond with\n","position":{"start":{"line":206,"column":12,"offset":7431},"end":{"line":207,"column":3,"offset":7485}}},{"type":"raw","value":"<code class=\"language-text\">server.respond()</code>","position":{"start":{"line":207,"column":3,"offset":7485},"end":{"line":207,"column":21,"offset":7503}}},{"type":"text","value":".","position":{"start":{"line":207,"column":21,"offset":7503},"end":{"line":207,"column":22,"offset":7504}}}],"position":{"start":{"line":206,"column":1,"offset":7420},"end":{"line":207,"column":22,"offset":7504}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"After Each:","position":{"start":{"line":208,"column":5,"offset":7509},"end":{"line":208,"column":16,"offset":7520}}}],"position":{"start":{"line":208,"column":3,"offset":7507},"end":{"line":208,"column":18,"offset":7522}}},{"type":"text","value":" Restore native functionality.","position":{"start":{"line":208,"column":18,"offset":7522},"end":{"line":208,"column":48,"offset":7552}}}],"position":{"start":{"line":208,"column":1,"offset":7505},"end":{"line":208,"column":48,"offset":7552}}},{"type":"text","value":"\n"}],"position":{"start":{"line":202,"column":1,"offset":7198},"end":{"line":208,"column":48,"offset":7552}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The reason I have seven tests is to demonstrate all the different ways you can\nhave a server respond to requests by using the different signatures of\n","position":{"start":{"line":210,"column":1,"offset":7554},"end":{"line":212,"column":1,"offset":7704}}},{"type":"raw","value":"<code class=\"language-text\">server.respondWith(...)</code>","position":{"start":{"line":212,"column":1,"offset":7704},"end":{"line":212,"column":26,"offset":7729}}},{"type":"text","value":". In order, each of the tests do the following:","position":{"start":{"line":212,"column":26,"offset":7729},"end":{"line":212,"column":73,"offset":7776}}}],"position":{"start":{"line":210,"column":1,"offset":7554},"end":{"line":212,"column":73,"offset":7776}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Respond to all requests with the same plain text.","position":{"start":{"line":214,"column":4,"offset":7781},"end":{"line":214,"column":53,"offset":7830}}}],"position":{"start":{"line":214,"column":1,"offset":7778},"end":{"line":214,"column":53,"offset":7830}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Respond to all requests with a specific url.","position":{"start":{"line":215,"column":4,"offset":7834},"end":{"line":215,"column":48,"offset":7878}}}],"position":{"start":{"line":215,"column":1,"offset":7831},"end":{"line":215,"column":48,"offset":7878}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Respond to all requests to an url matching a given regular expression.","position":{"start":{"line":216,"column":4,"offset":7882},"end":{"line":216,"column":74,"offset":7952}}}],"position":{"start":{"line":216,"column":1,"offset":7879},"end":{"line":216,"column":74,"offset":7952}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Respond to all ","position":{"start":{"line":217,"column":4,"offset":7956},"end":{"line":217,"column":19,"offset":7971}}},{"type":"raw","value":"<code class=\"language-text\">GET</code>","position":{"start":{"line":217,"column":19,"offset":7971},"end":{"line":217,"column":24,"offset":7976}}},{"type":"text","value":" requests to a specific url.","position":{"start":{"line":217,"column":24,"offset":7976},"end":{"line":217,"column":52,"offset":8004}}}],"position":{"start":{"line":217,"column":1,"offset":7953},"end":{"line":217,"column":52,"offset":8004}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Respond to all ","position":{"start":{"line":218,"column":4,"offset":8008},"end":{"line":218,"column":19,"offset":8023}}},{"type":"raw","value":"<code class=\"language-text\">GET</code>","position":{"start":{"line":218,"column":19,"offset":8023},"end":{"line":218,"column":24,"offset":8028}}},{"type":"text","value":" requests to an url matching a given regular\nexpression.","position":{"start":{"line":218,"column":24,"offset":8028},"end":{"line":219,"column":15,"offset":8087}}}],"position":{"start":{"line":218,"column":1,"offset":8005},"end":{"line":219,"column":15,"offset":8087}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Respond to all ","position":{"start":{"line":220,"column":4,"offset":8091},"end":{"line":220,"column":19,"offset":8106}}},{"type":"raw","value":"<code class=\"language-text\">GET</code>","position":{"start":{"line":220,"column":19,"offset":8106},"end":{"line":220,"column":24,"offset":8111}}},{"type":"text","value":" requests to a specific url with custom headers.","position":{"start":{"line":220,"column":24,"offset":8111},"end":{"line":220,"column":72,"offset":8159}}}],"position":{"start":{"line":220,"column":1,"offset":8088},"end":{"line":220,"column":72,"offset":8159}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Respond to all ","position":{"start":{"line":221,"column":4,"offset":8163},"end":{"line":221,"column":19,"offset":8178}}},{"type":"raw","value":"<code class=\"language-text\">GET</code>","position":{"start":{"line":221,"column":19,"offset":8178},"end":{"line":221,"column":24,"offset":8183}}},{"type":"text","value":" requests to an url matching a given regular expression\nwith custom headers.","position":{"start":{"line":221,"column":24,"offset":8183},"end":{"line":222,"column":24,"offset":8262}}}],"position":{"start":{"line":221,"column":1,"offset":8160},"end":{"line":222,"column":24,"offset":8262}}},{"type":"text","value":"\n"}],"position":{"start":{"line":214,"column":1,"offset":7778},"end":{"line":222,"column":24,"offset":8262}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As you can see, fake servers are extremely flexible and are capable of\ncompletely decoupling your front-end tests from your back end enabling you to\nnot have to run a server for your tests. This, of course, can be accomplished\nwith regular stubbing, but the fake server approach is often simpler and more\nnatural.","position":{"start":{"line":224,"column":1,"offset":8264},"end":{"line":228,"column":9,"offset":8577}}}],"position":{"start":{"line":224,"column":1,"offset":8264},"end":{"line":228,"column":9,"offset":8577}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"JSON-P","position":{"start":{"line":230,"column":4,"offset":8582},"end":{"line":230,"column":10,"offset":8588}}}],"position":{"start":{"line":230,"column":1,"offset":8579},"end":{"line":230,"column":10,"offset":8588}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As of this writing, Sinon doesn't support fake JSON-P requests and it probably\nnever will. The official recommendation is to fall back to stubbing whenever\nyou need to make a JSON-P request. For more information, check out ","position":{"start":{"line":232,"column":1,"offset":8590},"end":{"line":234,"column":68,"offset":8813}}},{"type":"element","tagName":"a","properties":{"href":"http://sinonjs.org/docs/#json-p","title":"Sinon JSON-P Workaround"},"children":[{"type":"text","value":"the\nofficial documentation","position":{"start":{"line":234,"column":69,"offset":8814},"end":{"line":235,"column":23,"offset":8840}}}],"position":{"start":{"line":234,"column":68,"offset":8813},"end":{"line":235,"column":31,"offset":8848}}},{"type":"text","value":".","position":{"start":{"line":235,"column":31,"offset":8848},"end":{"line":235,"column":32,"offset":8849}}}],"position":{"start":{"line":232,"column":1,"offset":8590},"end":{"line":235,"column":32,"offset":8849}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":237,"column":4,"offset":8854},"end":{"line":237,"column":14,"offset":8864}}}],"position":{"start":{"line":237,"column":1,"offset":8851},"end":{"line":237,"column":14,"offset":8864}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"By using advanced features provided by ","position":{"start":{"line":239,"column":1,"offset":8866},"end":{"line":239,"column":40,"offset":8905}}},{"type":"element","tagName":"a","properties":{"href":"http://sinonjs.org/","title":"Sinon.JS"},"children":[{"type":"text","value":"Sinon","position":{"start":{"line":239,"column":41,"offset":8906},"end":{"line":239,"column":46,"offset":8911}}}],"position":{"start":{"line":239,"column":40,"offset":8905},"end":{"line":239,"column":54,"offset":8919}}},{"type":"text","value":" we are able to simplify\nand even drastically improve the performance of tests which rely on\n","position":{"start":{"line":239,"column":54,"offset":8919},"end":{"line":241,"column":1,"offset":9012}}},{"type":"raw","value":"<code class=\"language-text\">setTimeout</code>","position":{"start":{"line":241,"column":1,"offset":9012},"end":{"line":241,"column":13,"offset":9024}}},{"type":"text","value":", ","position":{"start":{"line":241,"column":13,"offset":9024},"end":{"line":241,"column":15,"offset":9026}}},{"type":"raw","value":"<code class=\"language-text\">setInterval</code>","position":{"start":{"line":241,"column":15,"offset":9026},"end":{"line":241,"column":28,"offset":9039}}},{"type":"text","value":", and making requests for external resources. To\nlearn more, be sure to check out ","position":{"start":{"line":241,"column":28,"offset":9039},"end":{"line":242,"column":34,"offset":9121}}},{"type":"element","tagName":"a","properties":{"href":"http://sinonjs.org/docs/","title":"Sinon.JS Official Documentation"},"children":[{"type":"text","value":"Sinon's Official Documentation","position":{"start":{"line":242,"column":35,"offset":9122},"end":{"line":242,"column":65,"offset":9152}}}],"position":{"start":{"line":242,"column":34,"offset":9121},"end":{"line":242,"column":76,"offset":9163}}},{"type":"text","value":".","position":{"start":{"line":242,"column":76,"offset":9163},"end":{"line":242,"column":77,"offset":9164}}}],"position":{"start":{"line":239,"column":1,"offset":8866},"end":{"line":242,"column":77,"offset":9164}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":251,"column":1,"offset":9624}}}}